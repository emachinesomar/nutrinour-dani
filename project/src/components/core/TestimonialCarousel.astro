---
export interface Testimonial {
  quote: string;
  author: string;
  role?: string;
  image?: string;
}

export interface Props {
  testimonials: Testimonial[];
}

const { testimonials } = Astro.props;
---

<div class="relative testimonial-carousel overflow-hidden">
  <div class="flex testimonial-container transition-transform duration-500">
    {testimonials.map((testimonial, index) => (
      <div class="testimonial-slide min-w-full px-4">
        <div class="bg-white p-6 md:p-8 rounded-lg shadow-md border border-gray-100">
          <div class="flex flex-col md:flex-row md:items-center gap-6">
            {testimonial.image && (
              <div class="flex-shrink-0">
                <img 
                  src={testimonial.image} 
                  alt={`Foto de ${testimonial.author}`} 
                  class="w-20 h-20 md:w-24 md:h-24 rounded-full object-cover"
                />
              </div>
            )}
            <div>
              <svg class="h-8 w-8 text-primary-light mb-4" fill="currentColor" viewBox="0 0 32 32">
                <path d="M10 8c-2.21 0-4 1.79-4 4v10h10V12h-6c0-1.1 0.9-2 2-2h2V8h-4zm12 0c-2.21 0-4 1.79-4 4v10h10V12h-6c0-1.1 0.9-2 2-2h2V8h-4z"></path>
              </svg>
              <p class="text-gray-700 mb-4">{testimonial.quote}</p>
              <div>
                <p class="font-bold">{testimonial.author}</p>
                {testimonial.role && <p class="text-gray-500 text-sm">{testimonial.role}</p>}
              </div>
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>
  
  <button class="absolute left-2 top-1/2 -translate-y-1/2 bg-white rounded-full p-2 shadow-md hover:bg-gray-50 focus:outline-none prev-btn">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
    </svg>
  </button>
  
  <button class="absolute right-2 top-1/2 -translate-y-1/2 bg-white rounded-full p-2 shadow-md hover:bg-gray-50 focus:outline-none next-btn">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
    </svg>
  </button>
  
  <div class="flex justify-center mt-6 space-x-2 dots-container">
    {testimonials.map((_, index) => (
      <button 
        class={`h-2 w-2 rounded-full bg-gray-300 focus:outline-none dot ${index === 0 ? 'active' : ''}`} 
        data-index={index}
        aria-label={`Testimonio ${index + 1}`}
      ></button>
    ))}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('.testimonial-container');
    const slides = document.querySelectorAll('.testimonial-slide');
    const dots = document.querySelectorAll('.dot');
    const prevBtn = document.querySelector('.prev-btn');
    const nextBtn = document.querySelector('.next-btn');
    
    if (!container || !slides.length || !dots.length || !prevBtn || !nextBtn) return;
    
    let currentIndex = 0;
    const slideCount = slides.length;
    
    const updateCarousel = (index) => {
      currentIndex = index;
      container.style.transform = `translateX(-${currentIndex * 100}%)`;
      
      // Update active dot
      dots.forEach((dot, i) => {
        if (i === currentIndex) {
          dot.classList.add('bg-primary', 'w-4');
          dot.classList.remove('bg-gray-300');
        } else {
          dot.classList.remove('bg-primary', 'w-4');
          dot.classList.add('bg-gray-300');
        }
      });
    };
    
    prevBtn.addEventListener('click', () => {
      const newIndex = (currentIndex - 1 + slideCount) % slideCount;
      updateCarousel(newIndex);
    });
    
    nextBtn.addEventListener('click', () => {
      const newIndex = (currentIndex + 1) % slideCount;
      updateCarousel(newIndex);
    });
    
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        updateCarousel(index);
      });
    });
    
    // Auto-play (optional)
    let interval = setInterval(() => {
      const newIndex = (currentIndex + 1) % slideCount;
      updateCarousel(newIndex);
    }, 5000);
    
    const carousel = document.querySelector('.testimonial-carousel');
    if (carousel) {
      carousel.addEventListener('mouseenter', () => clearInterval(interval));
      carousel.addEventListener('mouseleave', () => {
        interval = setInterval(() => {
          const newIndex = (currentIndex + 1) % slideCount;
          updateCarousel(newIndex);
        }, 5000);
      });
    }
  });
</script>

<style>
  .dot.active {
    @apply bg-primary w-4;
  }
</style>